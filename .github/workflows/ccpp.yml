on:
  pull_request:
    branches:
    - '*'
  release:
    types:
      - published

jobs:
  python:
    name: Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.7','3.8']
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: goanpeca/setup-miniconda@v1.1.2
        with:
          channels: conda-forge
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Setup
        shell: bash -l {0}
        run: |
            conda install -c conda-forge ninja pytest cython numpy compilers cmake -y
            conda install laz-perf --only-deps -y
        continue-on-error: true


      - name: Build
        shell: bash -l {0}
        run: |
            pip install -e .
        working-directory: ./python
      - name: Test
        shell: bash -l {0}
        run: |
            pytest
        working-directory: ./python
      - name: Wheel
        if: matrix.os != 'ubuntu-latest'
        run: |
            python setup.py bdist_wheel
        working-directory: ./python
      - name: Linux wheel
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest'
        run: |
            docker run -v $(pwd):/src quay.io/pypa/manylinux1_x86_64 /src/ci/build-wheel-linux.sh
      - uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: ${{matrix.os}}-${{matrix.python-version}}-whl
          path: ./python/wheelhouse
      - uses: actions/upload-artifact@v2
        if: matrix.os != 'ubuntu-latest'
        with:
          name: ${{matrix.os}}-${{matrix.python-version}}-whl
          path: ./python/dist

#      - name: Publish package
#        if: github.event_name == 'release' && matrix.os == 'ubuntu-latest'  && matrix.python-version == '3.8' && github.event.action == 'published'
#
#        uses: pypa/gh-action-pypi-publish@master
#        with:
#          user: __token__
#          password: ${{ secrets.pypi_token }}
#          packages_dir: ./python/dist

  base:
    name: Base library ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: goanpeca/setup-miniconda@v1.1.2
        with:
          channels: conda-forge
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Setup
        shell: bash -l {0}
        run: |
            conda install -c conda-forge ninja compilers cmake -y
            conda install laz-perf --only-deps -y
        continue-on-error: true
      - name: Configure
        shell: bash -l {0}
        working-directory: ./cpp
        run: |
            if [ "$RUNNER_OS" == "Windows" ]; then
              export CC=cl.exe
              export CXX=cl.exe
            fi
            cmake . -G Ninja -DCMAKE_BUILD_TYPE=Release -Dgtest_force_shared_crt=ON
      - name: Build
        shell: bash -l {0}
        working-directory: ./cpp
        run: |
            ninja
      - name: Test
        shell: bash -l {0}
        working-directory: ./cpp
        run: |
            ctest

  empscripten:

    name: empscripten
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - name: Fetch container
        shell: bash -l {0}
        run: |
            docker pull trzeci/emscripten:sdk-incoming-64bit
      - name: Build
        shell: bash -l {0}
        run: |
            docker run  --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-incoming-64bit /src/emscripten-build.sh
