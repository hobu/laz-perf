on:
  push:
    branches:
    - '*'
  pull_request:
    branches:
    - '*'
  release:
    types:
      - published

jobs:
  empscripten:
    name: empscripten
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - name: Fetch container
        shell: bash -l {0}
        run: |
            docker pull trzeci/emscripten:sdk-incoming-64bit
      - name: Build
        shell: bash -l {0}
        run: |
            docker run  --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-incoming-64bit /src/emscripten-build.sh

  t1:
    name: t1
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
        path: lazperf
      - name: Emsdk
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          git pull
          ./emsdk install latest
          ./emsdk activate latest
      - name : Run
        run: |
          . emsdk/emsdk_env.sh
          cd lazperf
          mkdir build
          cd build
          . ../emscripten-build.sh

  base:
    name: Base library ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          auto-update-conda: true
          python-version: '3.8'
      - name: Setup
        shell: bash -l {0}
        run: |
            conda update -n base -c defaults conda -y
            conda install ninja compilers cmake -y
            conda install laz-perf --only-deps -y
        continue-on-error: true
      - name: Configure
        shell: bash -l {0}
        run: |
            if [ "$RUNNER_OS" == "Windows" ]; then
              export CC=cl.exe
              export CXX=cl.exe
            fi
            mkdir build
            cd build
            cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -Dgtest_force_shared_crt=ON
      - name: Build
        shell: bash -l {0}
        run: |
            cd build
            ninja
      - name: Test
        shell: bash -l {0}
        run: |
            cd build
            ctest


  empscripten:
    name: empscripten
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - name: Fetch container
        shell: bash -l {0}
        run: |
            docker pull trzeci/emscripten:sdk-incoming-64bit
      - name: Build
        shell: bash -l {0}
        run: |
            docker run  --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-incoming-64bit /src/emscripten-build.sh

  test-wheel:
    name: Test Wheel ${{ matrix.os }} - ${{ matrix.python-version }}

    needs: [base, python, empscripten]

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.6','3.7','3.8']

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        name: Fetch ${{matrix.os}}-${{matrix.python-version}} wheel
        with:
          name: ${{matrix.os}}-${{matrix.python-version}}-whl
          path: ./python/dist

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Setup
        run: |
            python -m pip install --upgrade pip
            python -m pip install setuptools numpy flake8 pytest wheel

      - name: List dist
        working-directory: ./python/dist
        run: |
            python -v
            ls -alh *
        if: matrix.os != 'windows-latest'

      - name: Install
        working-directory: ./python/dist
        if: matrix.os != 'windows-latest'
        run: |
            for f in *.whl
            do
                python -m pip install $f
            done;

      - name: Install
        working-directory: ./python/dist
        if: matrix.os == 'windows-latest'
        shell: cmd /C CALL {0}
        run: |
            for %%f in (*.whl) do (python -m pip install %%f)
      - name: Test
        run: |
            python -m pytest --ignore cpp


  collect-artifacts:
    name: Package and push release

    needs: [test-wheel]

    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
      - name: Source
        shell: bash -l {0}
        run: |
            sudo apt install python3-pip
            python3 -m pip install --upgrade pip
            python3 -m pip install setuptools numpy flake8 pytest wheel
            export PATH=$PATH:/home/runner/.local/bin
            python3 setup.py sdist

      - uses: actions/download-artifact@v1
        name: Linux 3.6 wheel
        with:
          name: ubuntu-latest-3.6-whl
          path: dist

      - uses: actions/download-artifact@v1
        name: Linux 3.7 wheel
        with:
          name: ubuntu-latest-3.7-whl
          path: dist
      - uses: actions/download-artifact@v1
        name: Linux 3.8 wheel
        with:
          name: ubuntu-latest-3.8-whl
          path: dist

      - uses: actions/download-artifact@v1
        name: OSX 3.6 wheel
        with:
          name: macos-latest-3.6-whl
          path: dist
      - uses: actions/download-artifact@v1
        name: OSX 3.7 wheel
        with:
          name: macos-latest-3.7-whl
          path: dist
      - uses: actions/download-artifact@v1
        name: OSX 3.8 wheel
        with:
          name: macos-latest-3.8-whl
          path: dist

      - uses: actions/download-artifact@v1
        name: Windows 3.6 wheel
        with:
          name: windows-latest-3.6-whl
          path: dist
      - uses: actions/download-artifact@v1
        name: Windows 3.7 wheel
        with:
          name: windows-latest-3.7-whl
          path: dist
      - uses: actions/download-artifact@v1
        name: Windows 3.8 wheel
        with:
          name: windows-latest-3.8-whl
          path: dist

      - name: List dist
        shell: bash -l {0}
        working-directory: ./dist
        run: |
            ls -alh
      - uses: pypa/gh-action-pypi-publish@master
        name: Publish package
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          packages_dir: ./dist
